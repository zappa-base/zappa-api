type Album implements BaseModel  {
  # BaseModel
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime

  # Model Specific
  catalogNumber: String
  label: String
  releaseDate: Date
  title: String

  coverArtUrl: String
}

input AlbumInput {
  catalogNumber: String
  coverArtUrl: String
  label: String
  releaseDate: Date
  title: String
}

type AlbumResults {
  pagination: PaginationInfo
  results: [Album]
}

type Query {
  """
  List of `Album`s
  """
  albums(input: PaginationInput): AlbumResults

  """
  Album by the `UUID`
  """
  album(id: String!): Album
}

type Mutation {
  """
  Create a new `Album`
  """
  createAlbum(input: AlbumInput!): Album!

  """
  Update a current `Album` using its `UUID`
  """
  updateAlbum(id: String!, input: AlbumInput!): Album!

  """
  Update a current `Album` using its `UUID`
  """
  deleteAlbum(id: String!): Album!
}